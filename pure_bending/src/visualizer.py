import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import griddata


def viz_2D_mesh(Xp):
    fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(6, 4), dpi=200)
    axes.set_aspect('equal', adjustable='box')
    plt.plot(Xp[:, 0], Xp[:, 1], 'o')
    plt.savefig('../out/sampling_points.png')
    plt.show()


def contour_2D(X, U, S):
    fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(6, 4), dpi=200)
    grid_x, grid_y = np.meshgrid(np.linspace(np.min(X[:, 0]), np.max(X[:, 0]), 500),
                                 np.linspace(np.min(X[:, 1]), np.max(X[:, 1]), 100))
    grid_z = griddata((X[:, 0], X[:, 1]), U[:, 0], (grid_x, grid_y), method='cubic')
    cnt = axes[0][0].contourf(grid_x, grid_y, grid_z, 1000, cmap='jet')
    cbar = plt.colorbar(cnt, ax=axes[0][0], orientation='horizontal')
    cbar.ax.locator_params(nbins=5)
    cbar.ax.tick_params(labelsize=4)
    axes[0][0].tick_params(axis="x", labelsize=4)
    axes[0][0].tick_params(axis="y", labelsize=4)
    axes[0][0].set_aspect('equal', adjustable='box')
    axes[0][0].set_title('Displacement-x', fontsize=7)
    grid_z = griddata((X[:, 0], X[:, 1]), U[:, 1], (grid_x, grid_y), method='cubic')
    cnt = axes[0][1].contourf(grid_x, grid_y, grid_z, 1000, cmap='jet')
    cbar = plt.colorbar(cnt, ax=axes[0][1], orientation='horizontal')
    cbar.ax.locator_params(nbins=5)
    cbar.ax.tick_params(labelsize=4)
    axes[0][1].tick_params(axis="x", labelsize=4)
    axes[0][1].tick_params(axis="y", labelsize=4)
    axes[0][1].set_aspect('equal', adjustable='box')
    axes[0][1].set_title('Displacement-y', fontsize=7)
    grid_z = griddata((X[:, 0], X[:, 1]), np.linalg.norm(U, axis=1), (grid_x, grid_y), method='cubic')
    cnt = axes[0][2].contourf(grid_x, grid_y, grid_z, 1000, cmap='jet')
    cbar = plt.colorbar(cnt, ax=axes[0][2], orientation='horizontal')
    cbar.ax.locator_params(nbins=5)
    cbar.ax.tick_params(labelsize=4)
    axes[0][2].tick_params(axis="x", labelsize=4)
    axes[0][2].tick_params(axis="y", labelsize=4)
    axes[0][2].set_aspect('equal', adjustable='box')
    axes[0][2].set_title('Displacement-magnitude', fontsize=7)
    grid_z = griddata((X[:, 0], X[:, 1]), S[:, 0], (grid_x, grid_y), method='cubic')
    cnt = axes[1][0].contourf(grid_x, grid_y, grid_z, 1000, cmap='jet')
    cbar = plt.colorbar(cnt, ax=axes[1][0], orientation='horizontal')
    cbar.ax.locator_params(nbins=5)
    cbar.ax.tick_params(labelsize=4)
    axes[1][0].tick_params(axis="x", labelsize=4)
    axes[1][0].tick_params(axis="y", labelsize=4)
    axes[1][0].set_aspect('equal', adjustable='box')
    axes[1][0].set_title('Stress-xx', fontsize=7)
    grid_z = griddata((X[:, 0], X[:, 1]), S[:, 1], (grid_x, grid_y), method='cubic')
    cnt = axes[1][1].contourf(grid_x, grid_y, grid_z, 1000, cmap='jet')
    cbar = plt.colorbar(cnt, ax=axes[1][1], orientation='horizontal')
    cbar.ax.locator_params(nbins=5)
    cbar.ax.tick_params(labelsize=4)
    axes[1][1].tick_params(axis="x", labelsize=4)
    axes[1][1].tick_params(axis="y", labelsize=4)
    axes[1][1].set_aspect('equal', adjustable='box')
    axes[1][1].set_title('Stress-yy', fontsize=7)
    grid_z = griddata((X[:, 0], X[:, 1]), S[:, 2], (grid_x, grid_y), method='cubic')
    cnt = axes[1][2].contourf(grid_x, grid_y, grid_z, 1000, cmap='jet')
    cbar = plt.colorbar(cnt, ax=axes[1][2], orientation='horizontal')
    cbar.ax.locator_params(nbins=5)
    cbar.ax.tick_params(labelsize=4)
    axes[1][2].tick_params(axis="x", labelsize=4)
    axes[1][2].tick_params(axis="y", labelsize=4)
    axes[1][2].set_aspect('equal', adjustable='box')
    axes[1][2].set_title('Stress-xy', fontsize=7)
    plt.savefig('../out/snapshot.png')
    plt.show()


def plot_loss(result):
    plt.figure(figsize=(4, 4), dpi=200)
    plt.semilogy(range(len(result)), result)
    plt.title('Loss')
    plt.xlabel('Epochs')
    plt.savefig('../out/loss.png')
    plt.show()

